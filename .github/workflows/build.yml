name: 'Build pull request'

on:
  pull_request:
    branches:
      - 'master'
  release:
    branches:
      - 'master'
    types:
      - created
  push:
    branches:
      - master
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 'Cancel previous runs on same branch'
        uses: rokroskar/workflow-run-cleanup-action@v0.2.2
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: 'Checkout the code'
        uses: actions/checkout@v2

      - name: Load commit args
        id: commit_args
        env:
            COMMIT_MESSAGE: "${{github.event.head_commit.message}}"
            EVENT_NAME: "${{github.event_name}}"
        # args:
        # out_arg '\ml'   "multi_linux"       "true" "false"
        # out_arg '\noml' "no_multi_linux"    "true" "false"
        # out_arg '\ml'   "multi_linux"       "true" "false"
        # out_arg '\nc'   "no_cache"          "true" "false"
        # out_arg '\fr'   "release"           "true" "false" (only on master)
        # out_arg '\fr'   "release_tag"       (branch or tag)
        run: ls && scripts/ci/action_args_methods

      - name: Set up Docker Buildx
        if: ${{steps.commit_args.outputs.multi_linux=='true'}}
        id: buildx
        uses: crazy-max/ghaction-docker-buildx@v3
        with:
          buildx-version: latest
          qemu-version: latest

      - name: 'Load docker build cache'
        if: ${{steps.commit_args.outputs.no_cache!='true'}}
        uses: satackey/action-docker-layer-caching@v0.0.8
        # Ignore the failure of a step and avoid terminating the job.
        continue-on-error: true
        with:
          key: ${{github.repository}}-${{github.head_ref || github.ref}}
          restore-keys: |
            ${{github.repository}}

      - name: 'Build the Docker image on branch'
        env:
          DOCKER_USERNAME: '${{ secrets.DOCKER_USERNAME }}'
          DOCKER_ACCESS_TOKEN: '${{ secrets.DOCKER_ACCESS_TOKEN }}'
          DOCKER_IMAGE_TAG: 'ci-build'
          USE_BUILDX: ${{steps.commit_args.outputs.multi_linux}}
        run: bash docker/build

      # Only happens on release.
      - name: 'Release: Get the release tag (version)'
        if: ${{steps.commit_args.outputs.release=='true'}}
        id: release_tag
        run: echo ::set-output name=TAG::${GITHUB_REF/refs\/tags\//}

      - name: 'Release: Push the docker image for release'
        if: ${{steps.commit_args.outputs.release=='true'}}
        id: build-docker-image
        env:
          DOCKER_USERNAME: '${{ secrets.DOCKER_USERNAME }}'
          DOCKER_ACCESS_TOKEN: '${{ secrets.DOCKER_ACCESS_TOKEN }}'
          DOCKER_IMAGE_TAG: 'ci-build'
          DOCKER_VERSION_TAG: 'latest ${{ steps.release_tag.outputs.TAG }}'
        run: bash docker/build --push --skip-build

      - name: 'Release: Create helm release (tar the folder)'
        if: ${{steps.commit_args.outputs.release=='true'}}
        id: gzip-helm-release
        run: bash scripts/ci/create_helm_release

      - name: 'Release: Upload files'
        if: ${{steps.commit_args.outputs.release=='true'}}
        uses: AButler/upload-release-assets@v2.0
        with:
          files: 'helm.tar.gz'
          release-tag: ${{ steps.release_tag.outputs.TAG }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
