#!/usr/bin/env bash
: ${SCRIPTS_PATH:="$(dirname $(dirname $(realpath "$BASH_SOURCE[0]")))"}
source "$SCRIPTS_PATH/common.sh"

function out() {
    log "output.$1 = $2"
    echo "::set-output name=$1::$2"
}

function has_arg() {
    local ptrn="$1"
    if [[ "$COMMIT_MESSAGE" == *"$ptrn"* ]]; then
        echo "true"
        return 1
    fi
    echo "false"
    return 0
}

function out_arg() {
    local ptrn="$1"
    local name="$2"
    local true_value="$3"
    local false_value="$4"

    if [ "$(has_arg "$ptrn")" == "true" ]; then
        out "$name" "$false_value"
    else
        out "$name" "$true_value"
    fi
}


force_release="$(has_arg '\fr')"
release_tag="$(basename "$GITHUB_REF")"

is_debug="$(has_arg '\dbg')"

release="false"
if [ "$force_release" == "true" ] || [ "$EVENT_NAME" == 'release' ]; then
    if [ "$release_tag" == "master" ] || [ "$EVENT_NAME" == 'release' ] || [ "$is_debug" == "true" ]; then
        release="true"
        log:warning "This is a release run..."
    else
        log:warning "Ignored release since this is not master"
    fi
fi

multi_linux="false"
if [ "$(has_arg '\noml')" == "false" ]; then
    if [ "$(has_arg '\ml')" == "true" ]; then
        multi_linux="true"
    fi
fi

version="$release_tag"
if [ "$is_debug" == "true" ]; then
    version="release_debug"
elif [ "$(has_arg '\nl')" != "true" ]; then
    version="$version latest"
fi

log:sep "Commit message: "
echo "$COMMIT_MESSAGE"
log:sep "Args:"
out event_name "$EVENT_NAME"
out try_force_release "$force_release"
out release "$release"
out release_tag "$release_tag"
out multi_linux "$multi_linux"
out version "$version"
out_arg '\nc' "no_cache" "true" "false"
