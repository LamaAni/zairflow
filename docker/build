#!/usr/bin/env bash
CUR_PATH="$DOCKER_BUILD_PATH"
: ${REPO_PATH:="$(dirname $(dirname $(realpath "$BASH_SOURCE[0]")))"}

source "$REPO_PATH/scripts/common.sh"

help_text="
Build the zairflow image
Usage: build
Args:
    -t | --tag      the release to to use (defaults to local). 
    --version-tag   The version tag. If dose not exist, then skipped. If exists
                    then split by '.' and add each tag. i.e. tag.0.b.3 -> tags: [tag, tag.0, tag.0.b, tag.0.b.3]
    --hub-username  The docker username to use
    --hub-token     The docker token to use
Flags:
    -h | --help     Show this help menu.
    --push          If true then push (default to true on master)
    --multi-linux   If exists, attempt to use docker buildx, to mulid for multiple architectures.
                    The arch. can be set via DOCKER_ARCHITECTURES end
"

export DOCKER_CLI_EXPERIMENTAL="enabled"

: ${DOCKER_ACCESS_TOKEN:=""}
: ${DOCKER_USERNAME:=""}
: ${DOCKER_IMAGE_TAG:="local"}
: ${DOCKER_VERSION_TAG:=""}
: ${DO_PUSH:="false"}
: ${DOCKER_ARCHITECTURES:="linux/amd64,linux/arm64,linux/arm64/v8"}
: ${USE_BUILDX:=""}

while [ "$#" -gt 0 ]; do
    case $1 in
    --help | -h)
        echo "$help_text"
        exit 0
        ;;
    --push)
        DO_PUSH="true"
        ;;
    --hub-username)
        shift
        DOCKER_USERNAME="$1"
        ;;
    --hub-token)
        shift
        DOCKER_ACCESS_TOKEN="$1"
        ;;
    --version-tag)
        shift
        DOCKER_VERSION_TAG="$1"
        ;;
    --tag | -t)
        shift
        DOCKER_IMAGE_TAG="$1"
        ;;
    --multi-linux)
        USE_BUILDX="true"
        ;;
    *)
        echo "Error: unknown argument $1"
        exit 2
        ;;
    esac
    shift
done

# Move to build path.
cd "$REPO_PATH"
source "$REPO_PATH/envs"

####################################

function push_tag() {
    log:sep "Tagging and pushing: $1"
    docker tag "$ZAIRFLOW_IMAGE_REPOSITORY:local" "$ZAIRFLOW_IMAGE_REPOSITORY:$1"
    assert $? "Docker tag failed" || return $?
    docker push "$ZAIRFLOW_IMAGE_REPOSITORY:$1"
    assert $? "Docker push failed" || return $?
}

function build_image() {
    assert $? "Failed to load envs" || return $?

    local push_tags
    push_tags=()

    local version="local-build"
    if [ -n "$DOCKER_VERSION_TAG" ]; then
        local versions=($DOCKER_VERSION_TAG)
        for ver in "${versions[@]}"; do
            local version_split
            IFS='.' read -ra version_split <<<"$ver"
            local partial_tag=""
            for part in "${version_split[@]}"; do
                partial_tag="${partial_tag}${part}"
                push_tags+=("$partial_tag")
                version="$partial_tag" # the last and logest
                partial_tag="${partial_tag}."
            done
        done
    fi
    : ${push_tags:="$DOCKER_IMAGE_TAG"}

    log:sep "Config"
    log "Path:      " "$PWD"
    log "Repo:      " "${ZAIRFLOW_IMAGE_REPOSITORY}"
    log "local tag: " "${DOCKER_IMAGE_TAG}"
    log "push tags: " "${push_tags[@]}"
    log "version:   " "$version"

    local tag_argument=""
    local push_argument=""
    for tag in "${push_tags[@]}"; do
        tag_argument="$tag_argument -t ${ZAIRFLOW_IMAGE_REPOSITORY}:$tag"
        push_argument="$push_argument $ZAIRFLOW_IMAGE_REPOSITORY:$tag"
    done

    DOCKER_COMMAND_ARGS=""
    DOCKER_COMMAND_PLUGIN=""
    PUSH_COMMAND=""
    if [ "$USE_BUILDX" == "true" ]; then
        log:sep "${cyan}Building for multilinux!$ec"
        log "$DOCKER_ARCHITECTURES"
        DOCKER_COMMAND_PLUGIN="buildx"
        DOCKER_COMMAND_ARGS="--platform ${DOCKER_ARCHITECTURES}"
        PUSH_COMMAND="-o type=image,push=true"
    fi

    if [ "$DO_PUSH" == "true" ]; then
        DOCKER_COMMAND_ARGS="$DOCKER_COMMAND_ARGS $PUSH_COMMAND"
        log:sep "Building and pushing $ZAIRFLOW_IMAGE_REPOSITORY @ $PWD"
        log "$push_argument"
    else
        log:sep "Building $ZAIRFLOW_IMAGE_REPOSITORY @ $PWD"
    fi

    docker $DOCKER_COMMAND_PLUGIN build \
        $tag_argument \
        $DOCKER_COMMAND_ARGS \
        --build-arg "ZAIRFLOW_VERSION=$version" \
        -f "./docker/Dockerfile" .
    assert $? "Docker build failed" || return $?

    if [ "$USE_BUILDX" != "true" ]; then
        log:sep "Pusing images"
        log "$push_argument"
        docker push $push_argument
    fi

}

if [ -n "$DOCKER_ACCESS_TOKEN" ]; then
    log:sep "Logging in to docker using $DOCKER_USERNAME:$DOCKER_ACCESS_TOKEN"
    docker login -u "$DOCKER_USERNAME" -p "$DOCKER_ACCESS_TOKEN"
fi

build_image
assert $? "Could not build docker image" || exit $?
