#!/usr/bin/env bash
CUR_PATH="$DOCKER_BUILD_PATH"
: ${REPO_PATH:="$(dirname $(dirname $(realpath "$BASH_SOURCE[0]")))"}

source "$REPO_PATH/scripts/common.sh"

help_text="
Build the zairflow image
Usage: build
Args:
    -t | --tag      the release to to use (defaults to local). 
    --version-tag   The version tag. If dose not exist, then skipped. If exists
                    then split by '.' and add each tag. i.e. tag.0.b.3 -> tags: [tag, tag.0, tag.0.b, tag.0.b.3]
    --version       The image version.
    --hub-username  The docker username to use
    --hub-token     The docker token to use
    --platforms     The os platforms to use with docker buildx
    --dockerfile    The dockerfile to use.
    --cache-dir     The cache directory for buildx
    --image-repo    The image repository
    --image-name    The image name (defaults to zairflow)
Flags:
    -h | --help     Show this help menu.
    --push          If true then push (default to true on master)
    --multi-linux   If exists, attempt to use docker buildx, to mulid for multiple architectures.
                    The arch. can be set via PLATFORMS end
"

export DOCKER_CLI_EXPERIMENTAL="enabled"

: ${DOCKER_ACCESS_TOKEN:=""}
: ${DOCKER_USERNAME:=""}
: ${IMAGE_TAG:="local"}
: ${IMAGE_VERSION_TAGS:=""}
: ${VERSION="local-build"}
: ${DO_PUSH:="false"}
: ${USE_BUILDX:="false"}
: ${DOCKERFILE:="./docker/Dockerfile"}
: ${PLATFORMS:="linux/amd64,linux/arm64"}
: ${IMAGE_REPOSITORY:="lamaani"}
: ${IMAGE_NAME:="zairflow"}

while [ "$#" -gt 0 ]; do
    case $1 in
    --help | -h)
        echo "$help_text"
        exit 0
        ;;
    --push)
        DO_PUSH="true"
        ;;
    --hub-username)
        shift
        DOCKER_USERNAME="$1"
        ;;
    --hub-token)
        shift
        DOCKER_ACCESS_TOKEN="$1"
        ;;
    --version-tag)
        shift
        IMAGE_VERSION_TAGS="$1"
        ;;
    --version)
        shift
        VERSION="$1"
        ;;
    --tag | -t)
        shift
        IMAGE_TAG="$1"
        ;;
    --multi-linux)
        USE_BUILDX="true"
        ;;
    --dockerfile)
        shift
        DOCKERFILE="$1"
        ;;
    --platforms)
        shift
        PLATFORMS="$1"
        ;;
    --cache-dir)
        shift
        CACHE_DIR="$1"
        ;;
    --image-repo)
        shift
        IMAGE_REPOSITORY="$1"
        ;;
    *)
        echo "Error: unknown argument $1"
        exit 2
        ;;
    esac
    shift
done

# Must be lowercase
IMAGE_REPOSITORY="${IMAGE_REPOSITORY,,}"
IMAGE_NAME="${IMAGE_NAME,,}"
IMAGE_URI="${IMAGE_REPOSITORY}/${IMAGE_NAME}"

# Move to build path.
cd "$REPO_PATH"
source "$REPO_PATH/envs"

####################################

function push_tag() {
    log:sep "Tagging and pushing: $1"
    docker tag "$IMAGE_URI:local" "$IMAGE_URI:$1"
    assert $? "Docker tag failed" || return $?
    docker push "$IMAGE_URI:$1"
    assert $? "Docker push failed" || return $?
}

function build_image() {
    assert $? "Failed to load envs" || return $?

    local push_tags

    if [ -n "$IMAGE_VERSION_TAGS" ]; then
        push_tags=(${IMAGE_VERSION_TAGS[@]})
    else
        push_tags=("$IMAGE_TAG")
    fi

    log:sep "Config"
    log "Build Path:" "$PWD"
    log "Dockerfile:" "$DOCKERFILE"
    log "Repo:      " "${IMAGE_REPOSITORY}"
    log "Name:      " "${IMAGE_NAME}"
    log "local tag: " "${IMAGE_TAG}"
    log "push tags: " "${push_tags[@]}"
    log "version:   " "${VERSION}"
    log "buildx:    " "$USE_BUILDX"
    log "pushing:   " "$DO_PUSH"

    local tag_argument=""
    local push_argument=""
    for tag in "${push_tags[@]}"; do
        tag_argument="$tag_argument -t ${IMAGE_URI}:$tag"
        push_argument="$push_argument $IMAGE_REPOSITORY:$tag"
    done

    DOCKER_COMMAND_ARGS=""
    DOCKER_COMMAND_PLUGIN=""
    PUSH_COMMAND=""
    if [ "$USE_BUILDX" == "true" ]; then
        log:sep "${cyan}Building for multilinux!$ec"
        log "$PLATFORMS"
        DOCKER_COMMAND_PLUGIN="buildx"
        DOCKER_COMMAND_ARGS="--platform ${PLATFORMS}"
        PUSH_COMMAND="-o type=image,push=true"
        if [ -n "$CACHE_DIR" ]; then
            DOCKER_COMMAND_ARGS="$DOCKER_COMMAND_ARGS --cache-from type=local,src=$CACHE_DIR"
            DOCKER_COMMAND_ARGS="$DOCKER_COMMAND_ARGS --cache-to type=local,dest=$CACHE_DIR"
        fi
    fi

    if [ "$DO_PUSH" == "true" ]; then
        DOCKER_COMMAND_ARGS="$DOCKER_COMMAND_ARGS $PUSH_COMMAND"
        log:sep "Building and pushing $IMAGE_URI @ $PWD"
        log "$push_argument"
    else
        log:sep "Building $IMAGE_URI @ $PWD"
    fi

    echo docker $DOCKER_COMMAND_PLUGIN build \
        $tag_argument \
        $DOCKER_COMMAND_ARGS

    docker $DOCKER_COMMAND_PLUGIN build \
        $tag_argument \
        $DOCKER_COMMAND_ARGS \
        --build-arg "ZAIRFLOW_VERSION=$VERSION" \
        -f "$DOCKERFILE" .
    assert $? "Docker build failed" || return $?

    if [ "$DO_PUSH" == "true" ] && [ "$USE_BUILDX" != "true" ]; then
        log:sep "Pusing images"
        log "$push_argument"
        docker push $push_argument
    fi
}

if [ -n "$DOCKER_ACCESS_TOKEN" ]; then
    log:sep "Logging in to docker using $DOCKER_USERNAME:$DOCKER_ACCESS_TOKEN"
    docker login "$DOCKER_REGISTRY_URL" -u "$DOCKER_USERNAME" -p "$DOCKER_ACCESS_TOKEN"
fi

build_image
assert $? "Could not build docker image" || exit $?
