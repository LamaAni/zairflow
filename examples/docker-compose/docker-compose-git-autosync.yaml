version: '3.4'
x-globalenvs: &globalenvs 
  # As an example, initializing without the user code.
  ZAIRFLOW_POST_LOAD_USER_CODE: 'true'
  ZAIRFLOW_DB_HOST: 'postgres'

  # Git autosync
  ZAIRFLOW_GIT_AUTOSYNC_URI: 'https://github.com/LamaAni/zairflow.git'
  AIRFLOW__CORE__DAGS_FOLDER: /app/examples/docker-compose/dags
  AIRFLOW__CORE__PLUGINS_FOLDER: /app/examples/docker-compose/plugins

  # Other airflow args
  AIRFLOW__CORE__LOGGING_CONFIG_CLASS: airflow_db_logger.airflow_log_config.LOGGING_CONFIG
  AIRFLOW__CORE__SQL_ALCHEMY_CONN: 'postgresql+psycopg2://airflow:airflow@postgres:5432/airflow'
  AIRFLOW__CORE__LOAD_EXAMPLES: 'False'


networks:
  airflow-backend:
    driver: bridge

services:
  airflow-web:
    image: lamaani/zairflow:latest
    networks:
      - airflow-backend
    ports:
      - '3030:8080'
    environment:
      ZAIRFLOW_CONTAINER_TYPE: 'webserver'
      ZAIRFLOW_RUN_INITDB: 'true'
      <<: *globalenvs

  airflow-scheduler:
    image: lamaani/zairflow:latest
    networks:
      - airflow-backend
    environment:
      ZAIRFLOW_CONTAINER_TYPE: 'scheduler'
      # start the airflow scheduler after the web-service has started.
      # since we want to run the init connections only once.
      ZAIRFLOW_WAIT_FOR: 'airflow-web:8080'
      <<: *globalenvs

  postgres:
    image: 'postgres:12.2'
    networks:
      - airflow-backend
    environment:
      POSTGRES_USER: 'airflow'
      POSTGRES_PASSWORD: 'airflow'
      POSTGRES_DB: 'airflow'
      MAX_CONNECTIONS: '10000'
    ports:
      - '5432:5432'
